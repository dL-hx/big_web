1. 初始化 package.json
$   npm init -y

2. 安装lodash 
npm install lodash -S

记忆函数
memorize 缓存纯函数
webworker js 开启多线程


Array.from(arguments)// 将伪数组转为数组
arguments 是伪数组 

args.concat(Array.from(arguments))  // 数组合并

// 副作用让函数变得不纯
// 副作用:
// 1. 配置文件
// 2. 数据库
// 3. 获取用户的输入
// ....


// lodash 中的组合函数
// flowRight  组合多个函数


//* flowRight()  从右到左运行, 用的更多
// 函数组合需要保证返回的参数 为一个,  需要配合curry 柯里化处理
// log / trace 进行追踪

// lodash 中提供的函数式编程模块 
// fp


// folktale 库  处理异步任务
// npm install folktale -S


函数式编程
1. 认识函数式编程
>  运算过程抽象为函数
2. 函数相关复习
    + 函数是一等公民 
    一等公民可以作为函数参数，可以作为函数返回值，也可以赋值给变量
    + 高阶函数(参数, 返回值)
    + 闭包
3. 函数式编程基础
    + lodash
    + 纯函数
        相同输入,相同输出, 无副作用
        可缓存,  可测试, 方便并行处理
    + 柯里化处理
        多元函数 转换为一元函数
    + 管道

    + 函数组合
        多个一元函数组合为一个功能更强大的函数
4. 函子(处理副作用)
    盒子包裹盒子中的值
    Functor
    MayBe
    Either
    IO(处理副作用)
    Task----folktale
        异步处理任务
    Monad ----扁平化 函子嵌套
        join flatMap