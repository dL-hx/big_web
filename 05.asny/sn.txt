在代码中明确的捕获每一个可能的异常,  而不是丢给全局统一处理

并行执行(合并promise: 多个promise组合)
// Promise.all() 等待所有任务结束
// Promise.race() // 只会等待第一个结束的任务
// 有一个promise 结束,  就会结束


// 微任务
// 回调队列中的任务, 称为[宏任务]
// [宏任务] 可以选择新的宏任务在队列中进行排队
// setTimeout 作为宏任务 在队列末尾进行排队

// 微任务在当前任务结束后, 立即执行
// promise 执行时序
// promise 作为微任务 执行
// promise&MutationObserver &process.nextTick

// 直接在本轮调用末尾执行
